//Even Fibonacci numbers

//Each new term in the Fibonacci sequence is generated by 
//adding the previous two terms. By starting with 1 and 2, 
//the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do 
//not exceed four million, find the sum of the even-valued terms.


//Solved 2/29/2020
//
//Notes: While this was my initial thought using this implementation,
//I don't necessarily like this implementation. Since this problem 
//only requires us to find the sum, the fibonacci function uses a lot
//of space to hold the array of fibonacci numbers. In a future revision,
//maybe we could only use the values that are relevant to the summation.
//
//I attempted to find a way to implement the solution without the need of
//iterating through each value, but wasn't successful in finding a solution.
//
//This implementation was meant to allow any two numbers be set as the initial 
//values to begin the summation sequence. The problem above began with 1 and two
//for the fibonacci sequence instead of the usual '0, 1, 1, 2' so it made sense
//to allow for other values.
//
//Another thought is that in this implementation, we find the summation in the 
//function we determine the fibonacci sequence. While this allows us to avoid 
//iterating through an array twice, it should ideally be treated as two seperate
//actions/methods. Maybe this is an indication that there's a different 
//implementation that's better abstracted while also minimizing space usage.

function fibonacci(startVal, nextValInSeq, maxNo){
  let arr = []   
  arr[0] = startVal 
  arr[1] = nextValInSeq
  let sum = 0

  //We need to determine the first even number
  //to start the summation. 
  if(startVal % 2 == 0){
      sum = startVal
  }else if(nextValInSeq % 2 == 0){
      sum = nextValInSeq
  }else{
      sum = startVal + nextValInSeq
  }

  //The problem required that the terms be under MaxNo.
  //This is different from the usual implementations
  //of fibonacci sequences (where usually the first
  //n terms are found). 
  for (let i = 2; arr[i-1] < maxNo; i++) 
  { 
      arr[i] = arr[i-1] + arr[i-2];
      if(arr[i] % 2 == 0){
          sum += arr[i]
      } 
  } 
  
  return sum; 
}
let maxNo = 4000000
let startVal = 1
let nextNoInSeq = 2

console.log(fibonacci(startVal,nextNoInSeq, maxNo))
